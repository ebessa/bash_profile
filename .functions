#!/bin/bash

function gifify {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i $1 -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize -resize 600x600\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > $1.gif
      rm out-static*.png
    else
      ffmpeg -i $1 -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > $1.gif
    fi
  else
    echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

function showcolors {
    for i in {0..255} ; do
          printf "\x1b[38;5;${i}mcolour${i}]\t"
            done

}

function adbtext {
    adb shell input text "$1" && adb shell input keyevent ENTER;
}

function get_branch {
    echo $(git rev-parse --abbrev-ref HEAD) #GET CURRENT BRANCH
}

function gignore { git update-index --assume-unchanged "$1"; }

function gunignore { git update-index --no-assume-unchanged "$1"; }

function gff { # git flow finish
    FBRANCH=$(get_branch);
    FTYPE=$(echo "$FBRANCH" | sed 's/\([a-z]*\)\/[a-z0-9_-]*/\1/');
    FNAME=$(echo "$FBRANCH" | sed 's/\([a-z]*\)\/\([a-z0-9_-]*\)/\2/');

    echo "git co develop && git pu && git co master && git pu";
    giall;

    echo "git flow $FTYPE finish $FNAME";
    git flow "$FTYPE" finish "$FNAME";
}

function gmg { # git merge
    FBRANCH=$(get_branch);

    git checkout "$1" && git pull;

    git checkout "$FBRANCH";
    git merge "$1"
}

function gps { # push to origin
    git push origin $(get_branch);
}

function grr {
  git push origin --delete "$1"
}

function gtag { # create and push tag in the format yymmdd_hhmm
    git checkout master
    DTIME=$(date +"%y%m%d_%H%M");
    echo "Created tag $DTIME. Pushing to remote repository..."
    git tag "$DTIME" && git push origin "$DTIME"
}
